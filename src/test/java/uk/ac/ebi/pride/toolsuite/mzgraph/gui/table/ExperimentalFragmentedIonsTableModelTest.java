package uk.ac.ebi.pride.toolsuite.mzgraph.gui.table;

import org.junit.Test;
import uk.ac.ebi.pride.utilities.iongen.model.PrecursorIon;
import uk.ac.ebi.pride.utilities.iongen.model.ProductIon;
import uk.ac.ebi.pride.utilities.iongen.impl.DefaultPrecursorIon;
import uk.ac.ebi.pride.utilities.mol.*;
import uk.ac.ebi.pride.utilities.iongen.ion.FragmentIonType;
import uk.ac.ebi.pride.toolsuite.mzgraph.ExampleUtil;
import uk.ac.ebi.pride.toolsuite.mzgraph.chart.data.annotation.IonAnnotation;
import uk.ac.ebi.pride.toolsuite.mzgraph.chart.data.annotation.IonAnnotationInfo;
import uk.ac.ebi.pride.toolsuite.mzgraph.gui.data.ExperimentalFragmentedIonsTableModel;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Creator: Qingwei-XU
 * Date: 11/10/12
 */

public class ExperimentalFragmentedIonsTableModelTest {
    /**
     * this method just be used for test.
     *
     * random generate about thirty practice data based on the theoretical fragment ions mass over charge.
     */
    public Double[][] generateMatchedData() {
        Peptide peptide = ExampleUtil.generatePeptide();
        PrecursorIon precursorIon = new DefaultPrecursorIon(peptide, 2);
        ExperimentalFragmentedIonsTableModel model = new ExperimentalFragmentedIonsTableModel(precursorIon, ProductIonPair.B_Y);
        model.setPeaks(ExampleUtil.mzArr, ExampleUtil.intentArr);

        Double[][] matchedData = new Double[model.getRowCount()][model.getColumnCount()];

        int row;
        int column;
        Object theoreticalValue;
        double diff;
        ProductIon ion;
        for (int i = 0; i < 30; i++) {
            row = new Random().nextInt(model.getRowCount());
            column = new Random().nextInt(model.getColumnCount());
            theoreticalValue = model.getValueAt(row, column);
            if (theoreticalValue instanceof ProductIon) {
                ion = (ProductIon) theoreticalValue;
                diff = new Random().nextDouble() - 0.5;
                matchedData[row][column] = ion.getMassOverCharge() + diff;
            }
        }

        return matchedData;
    }

    private List<IonAnnotation> toList(IonAnnotation[][] matrix) {
        List<IonAnnotation> annotationList = new ArrayList<IonAnnotation>();

        if (matrix == null) {
            return annotationList;
        }

        IonAnnotation annotation;
        for (IonAnnotation[] row : matrix) {
            for (IonAnnotation cell : row) {
                annotation = cell;
                if (annotation != null && ! annotationList.contains(annotation)) {
                    annotationList.add(annotation);
                }
            }
        }

        return annotationList;
    }

    private void testEqual(List<IonAnnotation> annotations1, IonAnnotation[][] annotationsMatrix) {
        List<IonAnnotation> annotations2 = toList(annotationsMatrix);

        assertEquals(annotations1.size(), annotations2.size());

        for (IonAnnotation annotation : annotations2) {
            assertTrue(annotations1.contains(annotation));
        }
    }

    @Test
    public void testManualAnnotations() {
        Peptide peptide = ExampleUtil.generatePeptide();
        PrecursorIon precursorIon = new DefaultPrecursorIon(peptide, 2);
        ExperimentalFragmentedIonsTableModel model = new ExperimentalFragmentedIonsTableModel(precursorIon, ProductIonPair.B_Y);
        model.setPeaks(ExampleUtil.mzArr, ExampleUtil.intentArr);

        java.util.List<IonAnnotation> annotationList = ExampleUtil.generateAnnotationList();
        model.addAllManualAnnotations(annotationList);
        model.setShowAuto(false);

        testEqual(model.getManualAnnotations(), model.getMatchedData());
        assertTrue(model.getManualAnnotations().size() == 2);

        model.setPeaks(ExampleUtil.mzArr, ExampleUtil.intentArr);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
        assertTrue(model.getManualAnnotations().size() == 2);

        model.setProductIonPair(ProductIonPair.A_X);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
        assertTrue(model.getManualAnnotations().size() == 0);

        model.setProductIonPair(ProductIonPair.C_Z);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
        assertTrue(model.getManualAnnotations().size() == 1);
    }

    @Test
    public void testManualAnnotations2() {
        Peptide peptide = new Peptide("EIELEDK");
        List<Double> monoMass = new ArrayList<Double>();
        monoMass.add(144.105919);
        List<Double> avgMass = new ArrayList<Double>();
        PTModification m1 = new PTModification("", "", "", monoMass, avgMass);
        peptide.addModification(0, m1);
        monoMass = new ArrayList<Double>();
        monoMass.add(144.105919);
        avgMass = new ArrayList<Double>();
        PTModification m2 = new PTModification("", "", "", monoMass, avgMass);
        peptide.addModification(7, m2);
        PrecursorIon precursorIon = new DefaultPrecursorIon(peptide, 2);
        ExperimentalFragmentedIonsTableModel model = new ExperimentalFragmentedIonsTableModel(precursorIon, ProductIonPair.B_Y);
        double[] mzArr = {145.099351,291.226311,387.2518,406.2552,516.303653,648.410833,759.45199,890.545626,1001.687671,1019.597074,116.1138,274.166911,348.2584,488.29395,535.281848,629.3747,777.468667,891.524205,919.5154,1020.612196,117.1155,246.172272,359.240118,404.31738,517.288948,630.393831,778.438824,873.484731,920.5416,1021.601867,115.1162,292.234228,388.2642,486.304685,584.8692,649.4476,758.442089,874.494,981.5539,1002.56588,114.1119,228.186974,343.2615,407.2575,585.388188,645.4502,760.414588,892.490467,1020.272,159.1011,275.168083,390.284514,489.31075,573.3423,650.4173,706.45615,872.5025,1018.8165,175.1168,216.187463,315.2278,405.274157,581.428238,668.3631,776.4005,819.5384,118.1242,245.176837,344.215167,419.2833,573.8551,612.3802,707.4121,855.4571,144.1026,244.1835,345.1853,462.31175,585.893018,618.4039,709.6783,804.4656,163.1205,215.154192,372.1929,495.303,515.40155,631.449,730.45,836.4841,102.0527,130.0789,143.108,144.474,147.109,157.1022,162.1354,171.0936,181.1019,183.1525,184.1769,188.1468,197.1311,199.1584,200.1192,201.0901,202.1281,207.1148,211.1421,217.1873,224.1234,225.1379,226.166,229.1968,230.2083,231.1568,233.1571,238.1579,243.1449,243.8712,247.1782,248.1746,254.1349,256.1685,258.171729,259.149,260.1443,261.1441,266.1039,269.1671,272.1514,273.161409,273.8011,276.1605,283.1498,284.191,285.1842,286.1505,287.2072,289.214,290.2094,290.5816,290.8431,293.237,294.1559,298.2039,299.1376,301.2112,303.1884,305.2362,308.2123,314.1093,316.1876,318.1636,324.1729,328.1983,339.1775,347.2447,349.255,351.1776,352.2082,354.1433,355.2011,358.2242,360.2609,361.2334,362.2858,363.2562,371.1721,373.2203,374.226,375.2353,376.2535,377.2601,378.2499,379.1993,382.8488,383.1841,385.1909,386.2599,389.2846,391.2933,398.1606,399.2125,400.2574,402.2906,403.2955,408.2437,411.2773,412.2303,415.1865,416.2378,418.2192,420.2967,426.7672,428.29645,429.3132,430.2688,434.2565,438.27054,439.2518,440.2592,441.2521,442.2275,444.2888,445.2703,446.2842,447.2321,453.2784,456.3533,457.3043,458.3359,459.3133,461.33646,461.7763,464.2668,467.2413,468.2557,469.2099,470.2634,474.8114,476.3212,476.8023,477.28348,478.259,484.2961,485.3257,490.3079,491.26982,494.2486,496.329,498.2941,499.2509,500.2913,501.3369,502.3121,503.30114,504.35755,505.2795,506.2744,507.3078,508.265,509.8551,510.261,511.3035,513.2607,514.31195,516.5637,518.2478,519.337433,521.284,523.2976,526.3576,528.3663,529.2794,530.2892,533.354814,533.8684,534.3259,536.3129,537.3085,540.3877,540.7861,541.5524,542.2467,546.3723,546.7652,547.3478,551.9166,553.3544,553.8398,557.37892,558.8455,559.3797,560.3908,561.3633,561.6481,562.37614,563.3796,564.3904,565.3579,566.3253,567.3726,569.3438,570.3028,571.5712,574.3618,575.3047,576.3257,580.942567,586.3654,587.3224,588.3045,591.35964,592.4199,602.3095,611.4029,613.3692,615.3746,619.3383,633.3431,646.3614,647.3303,651.3691,672.3798,673.4224,681.3521,689.4282,698.3486,731.4339,746.414,747.372,749.4972,761.4476,774.4164,775.3137,779.4591,788.4609,800.4588,854.4623,875.4183,876.4591,878.569};
        double[] intentArr = {126.0,167.0,29.0,45.0,57.0,27.0,29.0,23.0,7.0,34.0,62.0,90.0,14.0,16.0,29.0,13.0,24.0,19.0,2.0,27.0,49.0,61.0,11.0,15.0,27.0,13.0,21.0,16.0,2.0,12.0,37.0,47.0,10.0,13.0,26.0,8.0,18.0,7.0,2.0,5.0,32.0,23.0,8.0,11.0,17.0,4.0,8.0,6.0,3.0,9.0,18.0,7.0,8.0,14.0,4.0,6.0,4.0,2.0,8.0,16.0,6.0,7.0,13.0,4.0,6.0,3.0,6.0,16.0,6.0,6.0,11.0,3.0,4.0,3.0,6.0,15.0,6.0,6.0,11.0,3.0,2.0,2.0,6.0,13.0,6.0,6.0,8.0,3.0,2.0,2.0,2.0,2.0,5.0,2.0,2.0,2.0,2.0,3.0,3.0,4.0,3.0,6.0,5.0,2.0,4.0,2.0,3.0,3.0,5.0,2.0,2.0,4.0,3.0,3.0,6.0,4.0,2.0,2.0,9.0,2.0,7.0,5.0,2.0,2.0,7.0,2.0,3.0,2.0,2.0,2.0,4.0,11.0,5.0,8.0,2.0,2.0,3.0,3.0,3.0,3.0,4.0,2.0,4.0,4.0,3.0,2.0,2.0,6.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,2.0,4.0,3.0,3.0,2.0,3.0,2.0,4.0,3.0,2.0,5.0,2.0,2.0,2.0,3.0,5.0,2.0,2.0,6.0,4.0,2.0,2.0,3.0,5.0,6.0,2.0,2.0,3.0,4.0,4.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,3.0,2.0,4.0,5.0,2.0,2.0,5.0,2.0,2.0,2.0,2.0,3.0,2.0,2.0,4.0,2.0,3.0,3.0,3.0,2.0,5.0,2.0,3.0,2.0,3.0,3.0,3.0,3.0,4.0,2.0,5.0,2.0,3.0,2.0,4.0,5.0,3.0,5.0,4.0,3.0,2.0,4.0,4.0,5.0,4.0,2.0,2.0,2.0,5.0,2.0,2.0,2.0,4.0,6.0,3.0,3.0,6.0,2.0,4.0,2.0,3.0,3.0,2.0,7.0,4.0,3.0,7.0,4.0,2.0,2.0,2.0,2.0,2.0,2.0,4.0,2.0,5.0,2.0,5.0,3.0,2.0,2.0,4.0,2.0,5.0,2.0,4.0,7.0,5.0,2.0,2.0,2.0,2.0,6.0,2.0,2.0,6.0,2.0,2.0,2.0,5.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,2.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0};
        model.setPeaks(mzArr, intentArr);

        IonAnnotation annotation;
        IonAnnotationInfo info;
        double mz, intensity;

        mz = 274.166911;
        intensity = 90.0;
        info = new IonAnnotationInfo();
        info.addItem(new IonAnnotationInfo.Item(1, FragmentIonType.B_ION, 1, null));
        info.addItem(new IonAnnotationInfo.Item(1, FragmentIonType.Y_ION, 1, NeutralLoss.AMMONIA_LOSS));
        annotation = new IonAnnotation(mz, intensity, info);
        model.addManualAnnotation(annotation);

        mz = 387.2518;
        intensity = 29.0;
        info = new IonAnnotationInfo();
        info.addItem(new IonAnnotationInfo.Item(1, FragmentIonType.B_ION, 2, null));
        annotation = new IonAnnotation(mz, intensity, info);
        model.addManualAnnotation(annotation);

        mz = 102.0527;
        intensity = 2.0;
        info = new IonAnnotationInfo();
        info.addItem(new IonAnnotationInfo.Item(1, FragmentIonType.IMMONIUM_ION, 0, null));
        annotation = new IonAnnotation(mz, intensity, info);
        model.addManualAnnotation(annotation);

        mz = 246.172272;
        intensity = 61.0;
        info = new IonAnnotationInfo();
        info.addItem(new IonAnnotationInfo.Item(1, FragmentIonType.A_ION, 1, null));
        annotation = new IonAnnotation(mz, intensity, info);
        model.addManualAnnotation(annotation);

        assertTrue(model.getAllManualAnnotations().size() == 4);
        assertTrue(model.getManualAnnotations().size() == 2);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
        model.setProductIonPair(ProductIonPair.A_X);
        assertTrue(model.getManualAnnotations().size() == 1);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
        model.setProductIonPair(ProductIonPair.C_Z);
        assertTrue(model.getManualAnnotations().size() == 0);
        testEqual(model.getManualAnnotations(), model.getMatchedData());
    }

    private void testAutoNeutralLoss(ExperimentalFragmentedIonsTableModel model) {
        model.setShowAmmoniaLoss(true);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());

        model.setShowWaterLoss(true);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());

        model.setShowAmmoniaLoss(false);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());

        model.setShowWaterLoss(false);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());

        model.setShowAmmoniaLoss(false);
        model.setShowWaterLoss(false);
        int noLoss = model.getAutoAnnotations().size();

        model.setShowAmmoniaLoss(false);
        model.setShowWaterLoss(true);
        int waterLoss = model.getAutoAnnotations().size();
        assertTrue(waterLoss >= noLoss);
        waterLoss = waterLoss - noLoss;

        model.setShowAmmoniaLoss(true);
        model.setShowWaterLoss(false);
        int ammoniaLoss = model.getAutoAnnotations().size();
        assertTrue(ammoniaLoss >= noLoss);
        ammoniaLoss = ammoniaLoss - noLoss;

        model.setShowAmmoniaLoss(true);
        model.setShowWaterLoss(true);
        int totalLoss = model.getAutoAnnotations().size();
        assertTrue(totalLoss == noLoss + waterLoss + ammoniaLoss);

    }

    @Test
    public void testAutoAnnotations() {
        PrecursorIon precursorIon = new DefaultPrecursorIon("VAEGTQVLELPFKGDDITMVLILPKPEK", 2);
        double[] mzArray = {301.629638671875,305.1085205078125,309.20477294921875,311.2861328125,320.97601318359375,326.42022705078125,332.3282470703125,334.0474853515625,337.18170166015625,345.99652099609375,354.84912109375,355.48809814453125,364.644775390625,367.85565185546875,369.358642578125,373.140625,374.09991455078125,384.0521240234375,386.01641845703125,394.8807373046875,397.841064453125,409.113525390625,411.27862548828125,412.091064453125,415.63922119140625,434.1004638671875,435.59808349609375,437.24530029296875,439.5865478515625,441.20819091796875,450.09075927734375,450.72479248046875,451.5618896484375,452.5006103515625,453.53875732421875,455.90252685546875,457.013427734375,458.07196044921875,466.043212890625,469.5479736328125,470.45416259765625,476.42303466796875,479.1356201171875,480.90631103515625,483.4765625,485.3941650390625,497.3031005859375,498.18096923828125,501.20989990234375,515.068603515625,521.2744140625,526.13623046875,529.292724609375,530.3404541015625,531.2381591796875,532.312744140625,539.25439453125,540.279541015625,543.0755615234375,544.51611328125,546.44482421875,551.959228515625,552.989013671875,553.9417724609375,558.767333984375,560.2333984375,564.577880859375,567.06591796875,568.16357421875,569.367919921875,573.611328125,580.260986328125,580.8729248046875,583.5926513671875,586.1966552734375,593.5400390625,596.202392578125,597.1387939453125,598.316162109375,599.30517578125,600.51904296875,608.42333984375,610.0577392578125,611.317138671875,614.056640625,622.279541015625,628.396728515625,630.546142578125,632.163330078125,637.2713623046875,645.2423095703125,649.28955078125,652.1123046875,654.130859375,657.029541015625,658.179443359375,660.1903076171875,661.099365234375,664.361083984375,665.26953125,666.249267578125,667.1341552734375,668.73974609375,669.3896484375,678.2354736328125,680.1318359375,681.40966796875,683.3011474609375,691.9012451171875,693.507080078125,696.5921630859375,699.233642578125,700.328125,708.944091796875,710.8282470703125,711.453369140625,712.2335205078125,713.0006103515625,716.3089599609375,717.271240234375,721.438720703125,726.9403076171875,727.867919921875,738.3426513671875,739.0511474609375,741.1241455078125,742.01123046875,742.681640625,745.044921875,747.3212890625,748.5107421875,749.8212890625,751.3839111328125,754.23291015625,756.156982421875,757.4188232421875,758.154052734375,760.3125,760.9580078125,763.1279296875,766.3519287109375,769.099609375,773.318603515625,774.427734375,775.51806640625,778.332763671875,780.2017822265625,781.78271484375,782.4298095703125,785.44775390625,787.8389892578125,791.1185302734375,791.74365234375,793.921630859375,798.72021484375,799.404541015625,800.393798828125,801.0804443359375,807.2275390625,808.0946044921875,809.5726318359375,810.9969482421875,813.539306640625,814.401123046875,822.2652587890625,824.354248046875,825.3975830078125,826.232666015625,828.3245849609375,829.3065185546875,830.88232421875,835.3651123046875,836.2662353515625,837.5484619140625,839.315673828125,841.595458984375,842.5667724609375,846.135498046875,847.4388427734375,849.4298095703125,851.0577392578125,852.14013671875,853.9244384765625,854.9752197265625,856.433349609375,857.7186279296875,858.7626953125,860.51904296875,864.2835693359375,866.8768310546875,870.2279052734375,872.322021484375,874.01806640625,875.7730712890625,881.3062744140625,884.835205078125,886.466552734375,887.5189208984375,888.2645263671875,890.5780029296875,891.3394775390625,892.3460693359375,893.2490234375,893.88818359375,896.20751953125,897.6033935546875,899.4073486328125,900.3892822265625,903.4202880859375,905.92578125,907.1290283203125,908.6142578125,909.352783203125,910.1417236328125,915.4923095703125,916.680419921875,919.6810302734375,923.1485595703125,924.19287109375,926.104736328125,927.56396484375,928.5303955078125,934.8843994140625,937.3634033203125,938.5401611328125,939.343994140625,941.2647705078125,943.112060546875,946.0816650390625,948.43310546875,949.6824951171875,951.616455078125,952.5421142578125,955.3697509765625,956.3895263671875,958.20654296875,962.018798828125,963.27392578125,964.18603515625,965.37841796875,967.6435546875,969.347412109375,971.0858154296875,971.952880859375,973.129638671875,976.4493408203125,977.68212890625,978.628662109375,979.3179931640625,982.089111328125,984.1329345703125,985.532470703125,987.6839599609375,988.42236328125,991.432861328125,992.48388671875,994.6429443359375,995.5926513671875,996.6553955078125,997.4862060546875,998.7105712890625,1000.4217529296875,1001.9595947265625,1004.5628662109375,1005.6204833984375,1006.33837890625,1013.552490234375,1014.3565673828125,1015.3179931640625,1021.2921142578125,1022.207763671875,1023.2340087890625,1036.483642578125,1037.6552734375,1038.33984375,1040.4677734375,1041.86328125,1042.94287109375,1044.419189453125,1050.392578125,1053.455322265625,1056.51318359375,1058.57763671875,1064.485107421875,1068.43408203125,1070.64697265625,1072.15087890625,1072.94140625,1074.0322265625,1076.270263671875,1078.1474609375,1078.970703125,1079.79248046875,1080.4765625,1084.61572265625,1086.7919921875,1092.461669921875,1093.1474609375,1098.38623046875,1099.302734375,1101.041748046875,1104.5166015625,1105.384765625,1110.92431640625,1111.72265625,1112.785888671875,1116.4072265625,1117.22607421875,1118.13232421875,1119.44287109375,1120.04345703125,1126.062255859375,1129.294677734375,1133.46728515625,1134.792236328125,1137.1591796875,1138.41455078125,1142.68896484375,1153.380126953125,1154.449951171875,1155.43017578125,1156.760009765625,1166.75634765625,1168.224609375,1169.67822265625,1171.4775390625,1175.40185546875,1176.94970703125,1178.14111328125,1183.46435546875,1184.83349609375,1185.69677734375,1186.38037109375,1187.14306640625,1189.48193359375,1193.302734375,1198.88623046875,1199.81689453125,1200.47900390625,1201.6943359375,1203.20263671875,1204.71630859375,1212.070068359375,1214.36767578125,1217.4794921875,1218.440185546875,1226.22509765625,1227.853515625,1228.8935546875,1229.664794921875,1233.56298828125,1240.3369140625,1243.463623046875,1248.416015625,1249.07470703125,1249.7255859375,1250.510986328125,1253.35693359375,1264.595458984375,1267.34814453125,1268.53271484375,1269.32958984375,1270.767578125,1284.62158203125,1285.38916015625,1286.74365234375,1291.260498046875,1298.612548828125,1303.455078125,1304.250244140625,1307.597412109375,1310.5166015625,1312.026123046875,1312.844482421875,1317.6376953125,1318.6796875,1330.560546875,1331.722900390625,1332.4619140625,1335.41748046875,1342.084716796875,1346.169677734375,1346.879638671875,1351.53759765625,1353.498291015625,1354.1474609375,1355.40673828125,1356.172607421875,1358.3251953125,1363.20068359375,1364.0361328125,1365.446533203125,1366.47509765625,1370.895751953125,1381.476806640625,1382.77197265625,1383.983642578125,1391.583984375,1392.693359375,1403.782470703125,1414.3837890625,1419.26953125,1426.4638671875,1429.45703125,1430.0771484375,1437.87744140625,1440.50927734375,1443.558837890625,1444.800537109375,1445.656982421875,1447.188720703125,1455.789794921875,1456.7421875,1457.54541015625,1459.431884765625,1460.559326171875,1467.6767578125,1468.481689453125,1471.0537109375,1478.308837890625,1484.490966796875,1491.760009765625,1498.26220703125,1512.3671875,1541.40185546875,1556.791015625,1557.7734375,1558.563720703125,1560.41650390625,1568.634033203125,1572.3662109375,1573.39111328125,1574.7060546875,1582.7001953125,1585.9091796875,1596.716064453125,1597.572265625,1601.536865234375,1624.675537109375,1651.725341796875,1653.177490234375,1659.3310546875,1668.3681640625,1670.1083984375,1670.958251953125,1672.457275390625,1674.775390625,1683.63525390625,1684.731689453125,1685.38037109375,1686.572998046875,1701.357666015625,1702.643798828125,1709.803955078125,1710.690673828125,1711.67431640625,1715.59619140625,1728.64111328125,1729.6201171875,1745.1513671875,1762.359375,1779.461181640625,1785.56689453125,1798.35546875,1800.76611328125,1802.117431640625,1813.45068359375,1815.147216796875,1836.427001953125,1855.86865234375,1895.4453125,1896.611572265625,1897.65625,1898.346923828125,1938.667236328125,1956.393310546875};
        double[] intensityArray = {9096.0,4135.0,9488.0,18803.0,4188.0,3278.0,4165.0,2375.0,1033.0,7126.0,18488.0,2.0,5079.0,7839.0,4931.0,47397.0,10420.0,15953.0,7495.0,23681.0,15353.0,14228.0,1596.0,3185.0,4573.0,6891.0,7393.0,14459.0,22703.0,1077.0,943.0,7638.0,14504.0,8020.0,7924.0,3384.0,2257.0,21554.0,2404.0,7102.0,7410.0,9422.0,8786.0,11097.0,20477.0,7142.0,20087.0,4873.0,15813.0,19507.0,4133.0,6255.0,16023.0,4221.0,1589.0,14337.0,3920.0,5980.0,2843.0,5265.0,2364.0,8195.0,14093.0,558.0,4637.0,3712.0,10086.0,23119.0,34406.0,4361.0,2951.0,24750.0,6.0,11203.0,1979.0,4082.0,4068.0,3387.0,114029.0,80627.0,4464.0,2011.0,8386.0,5603.0,6854.0,2379.0,10753.0,6954.0,5909.0,13571.0,7111.0,5896.0,3687.0,10389.0,1532.0,4491.0,2900.0,2652.0,2702.0,3456.0,2912.0,33271.0,7629.0,3237.0,13866.0,11421.0,10770.0,2076.0,9055.0,25681.0,7955.0,3468.0,7326.0,16551.0,2846.0,102217.0,4511.0,10252.0,20502.0,13584.0,6712.0,2113.0,5119.0,13806.0,3586.0,10882.0,1644.0,3544.0,6836.0,3110.0,1433.0,5037.0,14570.0,26510.0,6460.0,10097.0,9842.0,20726.0,4.0,16163.0,5238.0,4955.0,58762.0,5987.0,19851.0,8068.0,8555.0,13918.0,2.0,25566.0,14125.0,14701.0,4.0,24745.0,21972.0,4533.0,6401.0,3397.0,2620.0,3940.0,4907.0,5396.0,2684.0,11510.0,10130.0,98677.0,21800.0,8331.0,13106.0,10533.0,3657.0,18781.0,3374.0,743.0,7968.0,7256.0,2720.0,11885.0,2052.0,3727.0,7119.0,22079.0,6373.0,10234.0,36315.0,6327.0,870.0,14906.0,7747.0,2519.0,5656.0,14572.0,19555.0,8552.0,14747.0,6770.0,11806.0,8421.0,10200.0,2427.0,9480.0,8960.0,16381.0,2094.0,5602.0,9160.0,42727.0,28717.0,5607.0,21588.0,10139.0,11133.0,26940.0,28486.0,9748.0,10975.0,18152.0,32169.0,24923.0,5533.0,24394.0,7238.0,1154.0,67128.0,80394.0,9873.0,21168.0,17439.0,6840.0,3693.0,21378.0,18218.0,2090.0,15847.0,11077.0,18992.0,13416.0,11387.0,14975.0,8942.0,12911.0,17317.0,38825.0,16773.0,12412.0,5858.0,27556.0,28315.0,1621.0,6312.0,5331.0,10292.0,7284.0,4086.0,14681.0,39421.0,12018.0,3005.0,13368.0,4195.0,6442.0,7798.0,17872.0,6853.0,41816.0,7.0,10947.0,30763.0,5007.0,21673.0,6290.0,16661.0,69434.0,46068.0,6040.0,52261.0,26523.0,6078.0,23481.0,7341.0,9525.0,5201.0,10350.0,27911.0,7625.0,15824.0,18267.0,32595.0,26808.0,12871.0,147404.0,7538.0,9032.0,8369.0,4271.0,14951.0,35909.0,1.0,11423.0,28420.0,22605.0,26909.0,38189.0,5383.0,23396.0,14982.0,3688.0,6562.0,11089.0,13099.0,18815.0,13127.0,21560.0,62748.0,2923.0,25321.0,8713.0,110876.0,22560.0,11564.0,4767.0,9333.0,7516.0,61489.0,16507.0,5067.0,6314.0,9995.0,5545.0,9698.0,9408.0,25512.0,12089.0,11007.0,3317.0,14860.0,155094.0,80561.0,277.0,11679.0,4106.0,12426.0,12792.0,16095.0,32425.0,41288.0,4172.0,29479.0,3467.0,6293.0,8471.0,21140.0,9899.0,117363.0,48090.0,2443.0,787.0,9336.0,1080.0,21924.0,71188.0,8.0,3053.0,26670.0,10283.0,31824.0,1862.0,16666.0,35393.0,15490.0,5028.0,8664.0,27034.0,45974.0,16439.0,20203.0,36177.0,10702.0,1384.0,19045.0,15125.0,4404.0,6744.0,4232.0,3483.0,1940.0,3107.0,16312.0,16300.0,26595.0,9968.0,12295.0,4365.0,3729.0,14762.0,23496.0,8366.0,27158.0,7930.0,11766.0,6895.0,4111.0,12207.0,18843.0,8.0,9151.0,2434.0,24268.0,7331.0,9156.0,14223.0,6912.0,31783.0,15694.0,9087.0,26686.0,20085.0,24084.0,14017.0,7695.0,6766.0,14849.0,22921.0,5701.0,10987.0,3253.0,19645.0,7781.0,16521.0,4571.0,16078.0,3091.0,8413.0,2027.0,5825.0,15880.0,3585.0,9381.0,3840.0,15797.0,8126.0,7346.0,14359.0,18550.0,12204.0,20298.0,16696.0,4440.0,17828.0,10175.0,10961.0,5648.0,6862.0,20040.0,12195.0,3454.0,4044.0,6821.0,3143.0,8249.0,2645.0,9023.0,4334.0,6917.0,2177.0,5975.0,28057.0,3314.0,8113.0,6826.0,4277.0,5836.0,13207.0,9.0,15039.0,0.0};

        ExperimentalFragmentedIonsTableModel model = new ExperimentalFragmentedIonsTableModel(precursorIon, ProductIonPair.B_Y);
        model.setShowAuto(true);
        model.setCalculate(true);

        testEqual(model.getAutoAnnotations(), model.getMatchedData());

        model.setPeaks(mzArray, intensityArray);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        testAutoNeutralLoss(model);

        model.setRange(0.2);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        testAutoNeutralLoss(model);

        model.setPeaks(mzArray, intensityArray);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        testAutoNeutralLoss(model);

        model.setProductIonPair(ProductIonPair.A_X);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        testAutoNeutralLoss(model);

        model.setProductIonPair(ProductIonPair.C_Z);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        testAutoNeutralLoss(model);

        model.setCalculate(false);
        testEqual(model.getAutoAnnotations(), model.getMatchedData());
        assertTrue(model.getAutoAnnotations().size() == 0);
    }

    @Test
    public void testAutoAnnotations2() {
        PrecursorIon precursorIon = new DefaultPrecursorIon("VAEGTQVLELPFKGDDITMVLILPKPEK", 2);
        double[] mzArray = {301.629638671875,305.1085205078125,309.20477294921875,311.2861328125,320.97601318359375,326.42022705078125,332.3282470703125,334.0474853515625,337.18170166015625,345.99652099609375,354.84912109375,355.48809814453125,364.644775390625,367.85565185546875,369.358642578125,373.140625,374.09991455078125,384.0521240234375,386.01641845703125,394.8807373046875,397.841064453125,409.113525390625,411.27862548828125,412.091064453125,415.63922119140625,434.1004638671875,435.59808349609375,437.24530029296875,439.5865478515625,441.20819091796875,450.09075927734375,450.72479248046875,451.5618896484375,452.5006103515625,453.53875732421875,455.90252685546875,457.013427734375,458.07196044921875,466.043212890625,469.5479736328125,470.45416259765625,476.42303466796875,479.1356201171875,480.90631103515625,483.4765625,485.3941650390625,497.3031005859375,498.18096923828125,501.20989990234375,515.068603515625,521.2744140625,526.13623046875,529.292724609375,530.3404541015625,531.2381591796875,532.312744140625,539.25439453125,540.279541015625,543.0755615234375,544.51611328125,546.44482421875,551.959228515625,552.989013671875,553.9417724609375,558.767333984375,560.2333984375,564.577880859375,567.06591796875,568.16357421875,569.367919921875,573.611328125,580.260986328125,580.8729248046875,583.5926513671875,586.1966552734375,593.5400390625,596.202392578125,597.1387939453125,598.316162109375,599.30517578125,600.51904296875,608.42333984375,610.0577392578125,611.317138671875,614.056640625,622.279541015625,628.396728515625,630.546142578125,632.163330078125,637.2713623046875,645.2423095703125,649.28955078125,652.1123046875,654.130859375,657.029541015625,658.179443359375,660.1903076171875,661.099365234375,664.361083984375,665.26953125,666.249267578125,667.1341552734375,668.73974609375,669.3896484375,678.2354736328125,680.1318359375,681.40966796875,683.3011474609375,691.9012451171875,693.507080078125,696.5921630859375,699.233642578125,700.328125,708.944091796875,710.8282470703125,711.453369140625,712.2335205078125,713.0006103515625,716.3089599609375,717.271240234375,721.438720703125,726.9403076171875,727.867919921875,738.3426513671875,739.0511474609375,741.1241455078125,742.01123046875,742.681640625,745.044921875,747.3212890625,748.5107421875,749.8212890625,751.3839111328125,754.23291015625,756.156982421875,757.4188232421875,758.154052734375,760.3125,760.9580078125,763.1279296875,766.3519287109375,769.099609375,773.318603515625,774.427734375,775.51806640625,778.332763671875,780.2017822265625,781.78271484375,782.4298095703125,785.44775390625,787.8389892578125,791.1185302734375,791.74365234375,793.921630859375,798.72021484375,799.404541015625,800.393798828125,801.0804443359375,807.2275390625,808.0946044921875,809.5726318359375,810.9969482421875,813.539306640625,814.401123046875,822.2652587890625,824.354248046875,825.3975830078125,826.232666015625,828.3245849609375,829.3065185546875,830.88232421875,835.3651123046875,836.2662353515625,837.5484619140625,839.315673828125,841.595458984375,842.5667724609375,846.135498046875,847.4388427734375,849.4298095703125,851.0577392578125,852.14013671875,853.9244384765625,854.9752197265625,856.433349609375,857.7186279296875,858.7626953125,860.51904296875,864.2835693359375,866.8768310546875,870.2279052734375,872.322021484375,874.01806640625,875.7730712890625,881.3062744140625,884.835205078125,886.466552734375,887.5189208984375,888.2645263671875,890.5780029296875,891.3394775390625,892.3460693359375,893.2490234375,893.88818359375,896.20751953125,897.6033935546875,899.4073486328125,900.3892822265625,903.4202880859375,905.92578125,907.1290283203125,908.6142578125,909.352783203125,910.1417236328125,915.4923095703125,916.680419921875,919.6810302734375,923.1485595703125,924.19287109375,926.104736328125,927.56396484375,928.5303955078125,934.8843994140625,937.3634033203125,938.5401611328125,939.343994140625,941.2647705078125,943.112060546875,946.0816650390625,948.43310546875,949.6824951171875,951.616455078125,952.5421142578125,955.3697509765625,956.3895263671875,958.20654296875,962.018798828125,963.27392578125,964.18603515625,965.37841796875,967.6435546875,969.347412109375,971.0858154296875,971.952880859375,973.129638671875,976.4493408203125,977.68212890625,978.628662109375,979.3179931640625,982.089111328125,984.1329345703125,985.532470703125,987.6839599609375,988.42236328125,991.432861328125,992.48388671875,994.6429443359375,995.5926513671875,996.6553955078125,997.4862060546875,998.7105712890625,1000.4217529296875,1001.9595947265625,1004.5628662109375,1005.6204833984375,1006.33837890625,1013.552490234375,1014.3565673828125,1015.3179931640625,1021.2921142578125,1022.207763671875,1023.2340087890625,1036.483642578125,1037.6552734375,1038.33984375,1040.4677734375,1041.86328125,1042.94287109375,1044.419189453125,1050.392578125,1053.455322265625,1056.51318359375,1058.57763671875,1064.485107421875,1068.43408203125,1070.64697265625,1072.15087890625,1072.94140625,1074.0322265625,1076.270263671875,1078.1474609375,1078.970703125,1079.79248046875,1080.4765625,1084.61572265625,1086.7919921875,1092.461669921875,1093.1474609375,1098.38623046875,1099.302734375,1101.041748046875,1104.5166015625,1105.384765625,1110.92431640625,1111.72265625,1112.785888671875,1116.4072265625,1117.22607421875,1118.13232421875,1119.44287109375,1120.04345703125,1126.062255859375,1129.294677734375,1133.46728515625,1134.792236328125,1137.1591796875,1138.41455078125,1142.68896484375,1153.380126953125,1154.449951171875,1155.43017578125,1156.760009765625,1166.75634765625,1168.224609375,1169.67822265625,1171.4775390625,1175.40185546875,1176.94970703125,1178.14111328125,1183.46435546875,1184.83349609375,1185.69677734375,1186.38037109375,1187.14306640625,1189.48193359375,1193.302734375,1198.88623046875,1199.81689453125,1200.47900390625,1201.6943359375,1203.20263671875,1204.71630859375,1212.070068359375,1214.36767578125,1217.4794921875,1218.440185546875,1226.22509765625,1227.853515625,1228.8935546875,1229.664794921875,1233.56298828125,1240.3369140625,1243.463623046875,1248.416015625,1249.07470703125,1249.7255859375,1250.510986328125,1253.35693359375,1264.595458984375,1267.34814453125,1268.53271484375,1269.32958984375,1270.767578125,1284.62158203125,1285.38916015625,1286.74365234375,1291.260498046875,1298.612548828125,1303.455078125,1304.250244140625,1307.597412109375,1310.5166015625,1312.026123046875,1312.844482421875,1317.6376953125,1318.6796875,1330.560546875,1331.722900390625,1332.4619140625,1335.41748046875,1342.084716796875,1346.169677734375,1346.879638671875,1351.53759765625,1353.498291015625,1354.1474609375,1355.40673828125,1356.172607421875,1358.3251953125,1363.20068359375,1364.0361328125,1365.446533203125,1366.47509765625,1370.895751953125,1381.476806640625,1382.77197265625,1383.983642578125,1391.583984375,1392.693359375,1403.782470703125,1414.3837890625,1419.26953125,1426.4638671875,1429.45703125,1430.0771484375,1437.87744140625,1440.50927734375,1443.558837890625,1444.800537109375,1445.656982421875,1447.188720703125,1455.789794921875,1456.7421875,1457.54541015625,1459.431884765625,1460.559326171875,1467.6767578125,1468.481689453125,1471.0537109375,1478.308837890625,1484.490966796875,1491.760009765625,1498.26220703125,1512.3671875,1541.40185546875,1556.791015625,1557.7734375,1558.563720703125,1560.41650390625,1568.634033203125,1572.3662109375,1573.39111328125,1574.7060546875,1582.7001953125,1585.9091796875,1596.716064453125,1597.572265625,1601.536865234375,1624.675537109375,1651.725341796875,1653.177490234375,1659.3310546875,1668.3681640625,1670.1083984375,1670.958251953125,1672.457275390625,1674.775390625,1683.63525390625,1684.731689453125,1685.38037109375,1686.572998046875,1701.357666015625,1702.643798828125,1709.803955078125,1710.690673828125,1711.67431640625,1715.59619140625,1728.64111328125,1729.6201171875,1745.1513671875,1762.359375,1779.461181640625,1785.56689453125,1798.35546875,1800.76611328125,1802.117431640625,1813.45068359375,1815.147216796875,1836.427001953125,1855.86865234375,1895.4453125,1896.611572265625,1897.65625,1898.346923828125,1938.667236328125,1956.393310546875};
        double[] intensityArray = {9096.0,4135.0,9488.0,18803.0,4188.0,3278.0,4165.0,2375.0,1033.0,7126.0,18488.0,2.0,5079.0,7839.0,4931.0,47397.0,10420.0,15953.0,7495.0,23681.0,15353.0,14228.0,1596.0,3185.0,4573.0,6891.0,7393.0,14459.0,22703.0,1077.0,943.0,7638.0,14504.0,8020.0,7924.0,3384.0,2257.0,21554.0,2404.0,7102.0,7410.0,9422.0,8786.0,11097.0,20477.0,7142.0,20087.0,4873.0,15813.0,19507.0,4133.0,6255.0,16023.0,4221.0,1589.0,14337.0,3920.0,5980.0,2843.0,5265.0,2364.0,8195.0,14093.0,558.0,4637.0,3712.0,10086.0,23119.0,34406.0,4361.0,2951.0,24750.0,6.0,11203.0,1979.0,4082.0,4068.0,3387.0,114029.0,80627.0,4464.0,2011.0,8386.0,5603.0,6854.0,2379.0,10753.0,6954.0,5909.0,13571.0,7111.0,5896.0,3687.0,10389.0,1532.0,4491.0,2900.0,2652.0,2702.0,3456.0,2912.0,33271.0,7629.0,3237.0,13866.0,11421.0,10770.0,2076.0,9055.0,25681.0,7955.0,3468.0,7326.0,16551.0,2846.0,102217.0,4511.0,10252.0,20502.0,13584.0,6712.0,2113.0,5119.0,13806.0,3586.0,10882.0,1644.0,3544.0,6836.0,3110.0,1433.0,5037.0,14570.0,26510.0,6460.0,10097.0,9842.0,20726.0,4.0,16163.0,5238.0,4955.0,58762.0,5987.0,19851.0,8068.0,8555.0,13918.0,2.0,25566.0,14125.0,14701.0,4.0,24745.0,21972.0,4533.0,6401.0,3397.0,2620.0,3940.0,4907.0,5396.0,2684.0,11510.0,10130.0,98677.0,21800.0,8331.0,13106.0,10533.0,3657.0,18781.0,3374.0,743.0,7968.0,7256.0,2720.0,11885.0,2052.0,3727.0,7119.0,22079.0,6373.0,10234.0,36315.0,6327.0,870.0,14906.0,7747.0,2519.0,5656.0,14572.0,19555.0,8552.0,14747.0,6770.0,11806.0,8421.0,10200.0,2427.0,9480.0,8960.0,16381.0,2094.0,5602.0,9160.0,42727.0,28717.0,5607.0,21588.0,10139.0,11133.0,26940.0,28486.0,9748.0,10975.0,18152.0,32169.0,24923.0,5533.0,24394.0,7238.0,1154.0,67128.0,80394.0,9873.0,21168.0,17439.0,6840.0,3693.0,21378.0,18218.0,2090.0,15847.0,11077.0,18992.0,13416.0,11387.0,14975.0,8942.0,12911.0,17317.0,38825.0,16773.0,12412.0,5858.0,27556.0,28315.0,1621.0,6312.0,5331.0,10292.0,7284.0,4086.0,14681.0,39421.0,12018.0,3005.0,13368.0,4195.0,6442.0,7798.0,17872.0,6853.0,41816.0,7.0,10947.0,30763.0,5007.0,21673.0,6290.0,16661.0,69434.0,46068.0,6040.0,52261.0,26523.0,6078.0,23481.0,7341.0,9525.0,5201.0,10350.0,27911.0,7625.0,15824.0,18267.0,32595.0,26808.0,12871.0,147404.0,7538.0,9032.0,8369.0,4271.0,14951.0,35909.0,1.0,11423.0,28420.0,22605.0,26909.0,38189.0,5383.0,23396.0,14982.0,3688.0,6562.0,11089.0,13099.0,18815.0,13127.0,21560.0,62748.0,2923.0,25321.0,8713.0,110876.0,22560.0,11564.0,4767.0,9333.0,7516.0,61489.0,16507.0,5067.0,6314.0,9995.0,5545.0,9698.0,9408.0,25512.0,12089.0,11007.0,3317.0,14860.0,155094.0,80561.0,277.0,11679.0,4106.0,12426.0,12792.0,16095.0,32425.0,41288.0,4172.0,29479.0,3467.0,6293.0,8471.0,21140.0,9899.0,117363.0,48090.0,2443.0,787.0,9336.0,1080.0,21924.0,71188.0,8.0,3053.0,26670.0,10283.0,31824.0,1862.0,16666.0,35393.0,15490.0,5028.0,8664.0,27034.0,45974.0,16439.0,20203.0,36177.0,10702.0,1384.0,19045.0,15125.0,4404.0,6744.0,4232.0,3483.0,1940.0,3107.0,16312.0,16300.0,26595.0,9968.0,12295.0,4365.0,3729.0,14762.0,23496.0,8366.0,27158.0,7930.0,11766.0,6895.0,4111.0,12207.0,18843.0,8.0,9151.0,2434.0,24268.0,7331.0,9156.0,14223.0,6912.0,31783.0,15694.0,9087.0,26686.0,20085.0,24084.0,14017.0,7695.0,6766.0,14849.0,22921.0,5701.0,10987.0,3253.0,19645.0,7781.0,16521.0,4571.0,16078.0,3091.0,8413.0,2027.0,5825.0,15880.0,3585.0,9381.0,3840.0,15797.0,8126.0,7346.0,14359.0,18550.0,12204.0,20298.0,16696.0,4440.0,17828.0,10175.0,10961.0,5648.0,6862.0,20040.0,12195.0,3454.0,4044.0,6821.0,3143.0,8249.0,2645.0,9023.0,4334.0,6917.0,2177.0,5975.0,28057.0,3314.0,8113.0,6826.0,4277.0,5836.0,13207.0,9.0,15039.0,0.0};

        ExperimentalFragmentedIonsTableModel model = new ExperimentalFragmentedIonsTableModel(precursorIon, ProductIonPair.B_Y);
        model.setShowAuto(true);
        model.setCalculate(true);
        model.setPeaks(mzArray, intensityArray);

        testEqual(model.getAnnotations(), model.getMatchedData());

        model.setShowWaterLoss(true);
        testEqual(model.getAnnotations(), model.getMatchedData());

        model.setProductIonPair(ProductIonPair.A_X);
        testEqual(model.getAnnotations(), model.getMatchedData());

        model.setShowWaterLoss(false);
        testEqual(model.getAnnotations(), model.getMatchedData());

    }
}
